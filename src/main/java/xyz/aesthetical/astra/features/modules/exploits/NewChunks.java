package xyz.aesthetical.astra.features.modules.exploits;

import com.google.common.collect.Lists;
import net.minecraft.client.renderer.culling.Frustum;
import net.minecraft.network.play.server.SPacketChunkData;
import net.minecraft.util.math.AxisAlignedBB;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import xyz.aesthetical.astra.Astra;
import xyz.aesthetical.astra.events.network.PacketEvent;
import xyz.aesthetical.astra.events.render.RenderEvent;
import xyz.aesthetical.astra.features.settings.Setting;
import xyz.aesthetical.astra.managers.modules.Module;
import xyz.aesthetical.astra.managers.notifications.Notification;
import xyz.aesthetical.astra.util.ColorUtil;
import xyz.aesthetical.astra.util.RenderUtils;

import java.awt.*;
import java.util.ArrayList;
import java.util.Objects;

@Module.Mod(name = "NewChunks", description = "Highlights where newly generated chunks are")
@Module.Info(category = Module.Category.EXPLOITS)
public class NewChunks extends Module {
    public final Setting<Boolean> alert = register(new Setting<>("Alert", false).setDescription("If to alert you when you find new chunks."));
    public final Setting<Boolean> render = register(new Setting<>("Render", true).setDescription("If to render the new chunks"));
    public final Setting<Color> color = register(new Setting<>("Color", new Color(255, 0, 0)).setDescription("The color to render the new chunk with"));

    private final ArrayList<NewChunk> chunks = new ArrayList<>();
    private final Frustum frustum = new Frustum();

    @SubscribeEvent
    public void onPacketInbound(PacketEvent.Inbound event) {
        if (Module.fullNullCheck() && event.getPacket() instanceof SPacketChunkData) {
            SPacketChunkData packet = (SPacketChunkData) event.getPacket();
            if (!packet.isFullChunk()) {
                NewChunk chunk = new NewChunk(packet.getChunkX() * 16.0, packet.getChunkZ() * 16.0);
                if (!chunks.contains(chunk)) {
                    if (alert.getValue()) {
                        Astra.notificationManager.createNotification(new Notification(
                                "New Chunk",
                                Lists.newArrayList("New chunk found at X: " + chunk.x + " Z: " + chunk.z),
                                Notification.Type.WARNING
                        ));
                    }

                    chunks.add(chunk);
                }
            }
        }
    }

    @SubscribeEvent
    public void onRender(RenderEvent event) {
        if (Module.fullNullCheck() && !chunks.isEmpty() && render.getValue()) {
            synchronized (chunks) {
                for (NewChunk chunk : chunks) {
                    frustum.setPosition(Objects.requireNonNull(Astra.mc.getRenderViewEntity()).posX, Astra.mc.getRenderViewEntity().posY, Astra.mc.getRenderViewEntity().posZ);
                    AxisAlignedBB box = new AxisAlignedBB(chunk.x, 0, chunk.z, chunk.x + 16, 1, chunk.z + 16);
                    if (frustum.isBoundingBoxInFrustum(box)) {
                        Color c = color.getValue();
                        RenderUtils.drawBox(new AxisAlignedBB(0, 0, 0, 16, 1, 16), ColorUtil.toRGBA(c.getRed(), c.getGreen(), c.getBlue(), 255));
                    }
                }
            }
        }
    }

    private static class NewChunk {
        private final double x;
        private final double z;

        public NewChunk(double x, double z) {
            this.x = x;
            this.z = z;
        }

        public double getX() {
            return x;
        }

        public double getZ() {
            return z;
        }
    }
}
