package xyz.aesthetical.astra.features.modules.exploits;

import net.minecraft.item.ItemPickaxe;
import xyz.aesthetical.astra.Astra;
import xyz.aesthetical.astra.features.settings.NumberSetting;
import xyz.aesthetical.astra.features.settings.Setting;
import xyz.aesthetical.astra.managers.modules.Module;
import xyz.aesthetical.astra.util.EnumConverter;

// https://github.com/Elementars/Xulu-v1.5.2/blob/master/xuluv1.5.2/com/elementars/eclient/module/misc/NoEntityTrace.java
@Module.Mod(name = "GhostHand", description = "Allows you to mine through entities - thanks Xulu")
@Module.Info(category = Module.Category.EXPLOITS)
public class GhostHand extends Module {
    public static GhostHand instance;

    public final Setting<Mode> mode = register(new Setting<>("Mode", Mode.STATIC).setDescription("The behavior of the ghosthand"));
    public final Setting<Boolean> pickaxe = register(new Setting<>("Pickaxe", false).setDescription("If to only allow the use of pickaxes"));
    public final Setting<Boolean> attack = register(new Setting<>("Attack", false).setDescription("If to allow you to attack entities through walls"));
    public final NumberSetting attackRange = register(new NumberSetting("Attack Range", 6.0f).setMin(5.0f).setMax(10.0f).setDescription("How long to be able to attack entities through walls").setVisibility((m) -> attack.getValue()));

    public GhostHand() {
        instance = this;
    }

    @Override
    public String getDisplay() {
        String text = EnumConverter.getActualName(mode.getValue());

        boolean comma = false;
        if (pickaxe.getValue()) {
            text += " Pick";
            comma = true;
        }

        if (attack.getValue()) {
            text += (comma ? ", " : " ") + "Attack";
        }

        return text;
    }

    public boolean shouldBlock() {
        return (mode.getValue() == Mode.STATIC && Astra.mc.playerController.getIsHittingBlock()) && (!pickaxe.getValue() || Astra.mc.player.getHeldItemMainhand().getItem() instanceof ItemPickaxe);
    }

    public enum Mode {
        STATIC,
        DYNAMIC
    }
}
