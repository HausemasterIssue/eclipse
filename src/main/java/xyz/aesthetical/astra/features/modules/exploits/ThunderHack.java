package xyz.aesthetical.astra.features.modules.exploits;

import com.google.common.collect.Lists;
import net.minecraft.init.SoundEvents;
import net.minecraft.network.play.server.SPacketSoundEffect;
import net.minecraft.util.math.Vec3d;
import net.minecraftforge.event.world.WorldEvent;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import xyz.aesthetical.astra.Astra;
import xyz.aesthetical.astra.events.network.PacketEvent;
import xyz.aesthetical.astra.features.settings.Setting;
import xyz.aesthetical.astra.managers.modules.Module;
import xyz.aesthetical.astra.managers.notifications.Notification;

import java.util.ArrayList;

@Module.Mod(name = "ThunderHack", description = "Finds players using lightning")
@Module.Info(category = Module.Category.EXPLOITS)
public class ThunderHack extends Module {
    public static final ArrayList<Vec3d> sounds = new ArrayList<>();

    public final Setting<Boolean> notification = register(new Setting<>("Notification", true).setDescription("If to use notifications instead of the chat"));

    @SubscribeEvent
    public void onWorldUnload(WorldEvent.Unload event) {
        if (!sounds.isEmpty()) {
            sounds.clear();
        }
    }

    @Override
    public void onDisabled() {
        sounds.clear();
    }

    @SubscribeEvent
    public void onPacketInbound(PacketEvent.Inbound event) {
        if (Module.fullNullCheck() && event.getPacket() instanceof SPacketSoundEffect) {
            SPacketSoundEffect packet = (SPacketSoundEffect) event.getPacket();
            if (packet.getSound() == SoundEvents.ENTITY_LIGHTNING_THUNDER) {
                Vec3d pos = new Vec3d(packet.getX(), packet.getY(), packet.getZ());
                String message = String.format("XYZ: %s, %s, %s", pos.x, pos.y, pos.z);

                sounds.add(pos);

                if (notification.getValue()) {
                    Notification notification = new Notification(
                            "Thunder Sounded",
                            Lists.newArrayList("Thunder sounded at coordinates:", message),
                            Notification.Type.WARNING,
                            10L * 1000L
                    );
                    Astra.notificationManager.createNotification(notification);
                }
            }
        }
    }
}
